import RoxBase from 'rox-base';
const { Flags: flagsRepo } = RoxBase.Repositories;

import { setOverride, clearOverride, clearAllOverrides } from './Overrider';

import {
  compose,
  compileStyles,
  applyClass,
  setStyle,
  attachOnChangeHandler,
  attachOnClickHandler,
  attachOnKeyUpHandler,
  elementWithText,
  elementWithAttrs,
  elementWithChildren,
  divWithText,
  divWithChildren
} from './uiUtils';

let _root;
let _position;
let _filter;
let _flags;

const RESET_ALL_TEXT = 'Reset All Overrides';
const SEARCH_PLACEHOLDER = 'Search Flags';
const TITLE = 'ROX Overrides';
const ORIGINAL_VALUE_TEXT = 'Original value';
const ORIGINAL_OPTION_PREFIX = 'Original';
const DEFAULT_POSITON = 'bottom right';
const CSS = 'https://connect.rollout.io/rox.browser.css';
const POSITIONS = {
  'top left': { top: 0, left: 0 },
  'top right': { top: 0, right: 0 },
  'bottom left': { bottom: 0, left: 0 },
  'bottom right': { bottom: 0, right: 0 }
};

const ROOT_STYLE = {
  background: 'white',
  'z-index': 999999,
  position: 'fixed',
  width: '400px',
  height: '600px',
  overflow: 'auto'
};

const getVariantsCategories = () =>
  flagsRepo.items
    .map(i => i.dump())
    .filter(f => (_filter ? f.name.toLowerCase().indexOf(_filter.toLowerCase()) !== -1 : true))
    .reduce((agg, f) => {
      agg[f.nameDetails.namespace] ? null : (agg[f.nameDetails.namespace] = []);
      agg[f.nameDetails.namespace].push(f);
      return agg;
    }, {});

const option = ({ value, text, selected }) => {
  const el = document.createElement('option');
  selected && el.setAttribute('selected', true);
  el.setAttribute('value', value);
  el.textContent = text;
  return el;
};

const getSelected = ({ originalValue, overridingValue, option }) => {
  if (overridingValue) {
    return overridingValue === option;
  } else {
    return originalValue === option;
  }
};

const getFlagOptions = ({ options, originalValue, overridingValue } = { options: [] }) =>
  options.map(i => ({
    text: i === originalValue ? `${ORIGINAL_OPTION_PREFIX} (${i})` : i,
    value: i,
    selected: getSelected({ originalValue, overridingValue, option: i })
  }));

const applyRootStyle = el => setStyle(el, compileStyles(ROOT_STYLE) + ';' + compileStyles(POSITIONS[_position]));

const makeFlagTitle = ({ name, originalValue, overridingValue }) =>
  divWithChildren([
    divWithText(name),
    overridingValue
      ? compose(applyClass('roxFlagSub'), divWithText)(`${ORIGINAL_VALUE_TEXT}: ${originalValue}`)
      : undefined
  ]);

const makeCategory = (categories, category) =>
  divWithChildren([
    compose(applyClass('roxNamespace'), divWithText)(category),
    compose(applyClass('roxFlagsList'), divWithChildren)(categories[category].map(makeFlag))
  ]);
const makeCategories = categories => Object.keys(categories).map(makeCategory.bind(null, categories));

const makeFlag = ({ name, nameDetails, originalValue, overridingValue, options }) =>
  compose(applyClass('roxPushAside roxFlag'), divWithChildren)([
    makeFlagTitle({ name: nameDetails.name, originalValue, overridingValue }),
    selection(name, originalValue, getFlagOptions({ options, originalValue, overridingValue }))
  ]);

const header = () => {
  return compose(applyClass('roxPushAside roxTitle'), divWithChildren)([
    elementWithText('span', TITLE),
    attachOnClickHandler(elementWithText('a', 'â•³'), close)
  ]);
};

const handleSearchChange = ({ target, keyCode }) => {
  keyCode === 27 ? ((target.value = ''), (_filter = null)) : (_filter = target.value);
  render();
};

const search = () => {
  return attachOnKeyUpHandler(
    elementWithAttrs('input', {
      placeholder: SEARCH_PLACEHOLDER
    }),
    handleSearchChange
  );
};

const onResetAllClicked = () => (clearAllOverrides(), render());
const resetAllAction = () => attachOnClickHandler(elementWithText('a', RESET_ALL_TEXT), onResetAllClicked);

const onFlagChange = (name, originalValue) => e => (
  e.preventDefault(),
  originalValue === e.target.value ? clearOverride(name) : setOverride(name, e.target.value),
  render()
);

const selection = (name, originalValue, options = []) =>
  attachOnChangeHandler(elementWithChildren('select', options.map(option)), onFlagChange(name, originalValue));

const searchFieldWrapper = () =>
  compose(applyClass('roxSearch roxPushAside'), divWithChildren)([search(), resetAllAction()]);

const getFlagsView = () => compose(applyClass('roxFlags'), divWithChildren)(makeCategories(getVariantsCategories()));

function render() {
  _root.removeChild(_flags);
  _flags = getFlagsView();
  _root.appendChild(_flags);
}

export function open(position = DEFAULT_POSITON) {
  if (_root) return;
  if (Object.keys(POSITIONS).indexOf(position) === -1) position = DEFAULT_POSITON;
  _position = position;

  _flags = getFlagsView();

  _root = compose(applyClass('roxDbg'), applyRootStyle, divWithChildren)([
    divWithChildren([header(), searchFieldWrapper()]),
    _flags
  ]);

  const body = document.getElementsByTagName('body')[0];
  body.appendChild(
    elementWithAttrs('link', {
      href: 'https://fonts.googleapis.com/css?family=Lato',
      rel: 'stylesheet'
    })
  );
  body.appendChild(
    elementWithAttrs('link', {
      href: CSS,
      rel: 'stylesheet'
    })
  );

  body.appendChild(_root);
  render();
}

export function close() {
  const body = document.getElementsByTagName('body')[0];
  body.removeChild(_root);
  _root = undefined;
}
