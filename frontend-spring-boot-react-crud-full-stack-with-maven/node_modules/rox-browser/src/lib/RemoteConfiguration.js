import {
  freezeOptions,
  isFreezeOptionValid,
  getDefaultFreezeOption,
  defaultFreezeOptionForPlatform
} from './FreezeOptions';
import RoxBase from 'rox-base';
const { Configuration: BaseRemoteConfiguration } = RoxBase.Entities;
const { RoxxParser } = RoxBase.Parsers;

const parser = new RoxxParser();

export default class BrowserRemoteConfiguration extends BaseRemoteConfiguration {
  constructor(defaultValue, { freeze } = {}) {
    super(defaultValue);

    Object.defineProperty(this, '_frozen', {
      value: false,
      writable: true,
      enumerable: false
    });

    if (freeze && !isFreezeOptionValid(freeze)) {
      throw new Error(`Freeze option is invalid ${freeze}`);
    }
    this._localFreeze = freeze;
  }

  unfreeze() {
    this._frozen = false;
  }

  set value(newValue) {
    if (this._type !== typeof newValue || newValue === undefined) {
      this._value = this._defaultValue;
      return;
    }

    this._value = newValue;
    this._frozen = false;
  }

  getValue(context) {
    if (this._freeze === freezeOptions.freezeOptionNone) {
      if (this.condition) {
        this.value = parser.evaluateExpression(this.condition, undefined, context);
      }
      return this._value;
    }

    if (!this._frozen) {
      if (this.condition) {
        this.value = parser.evaluateExpression(this.condition, undefined, context);
      }
      this._frozen = true;
    }

    return this._value;
  }

  get _freeze() {
    return this._localFreeze || getDefaultFreezeOption() || defaultFreezeOptionForPlatform;
  }
}
