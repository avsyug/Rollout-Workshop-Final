export function compose() {
  var fns = arguments;

  return function(result) {
    for (var i = fns.length - 1; i > -1; i--) {
      result = fns[i].call(this, result);
    }

    return result;
  };
}

export const compileStyles = (styles = {}) =>
  Object.keys(styles)
    .map(key => `${key}: ${styles[key]}`)
    .join(';');

export const setStyle = (node, styleString = '') => (node.setAttribute('style', styleString), node);
export const applyClass = className => node => (node.setAttribute('class', className), node);

const attachEvent = (node, event, fn) => (node.addEventListener(event, fn), node);
export const attachOnChangeHandler = (node, fn) => attachEvent(node, 'change', fn);
export const attachOnClickHandler = (node, fn) => attachEvent(node, 'click', fn);
export const attachOnKeyUpHandler = (node, fn) => attachEvent(node, 'keyup', fn);

// -----------------------

let appendChildren, elementWithText, elementWithAttrs, elementWithChildren, divWithText, divWithChildren;
(appendChildren = elementWithText = elementWithAttrs = elementWithChildren = divWithText), (divWithChildren = () => {});

if (typeof window !== 'undefined' && typeof document !== 'undefined') {
  appendChildren = (node, children = []) =>
    children.reduce((node, ch) => (ch ? node.appendChild(ch) && node : node), node);

  elementWithText = (name = 'div', text = '') => {
    const el = document.createElement(name);
    el.textContent = text;
    return el;
  };

  elementWithAttrs = (name = 'div', attrs = {}) => {
    const el = document.createElement(name);
    Object.keys(attrs).forEach(key => el.setAttribute(key, attrs[key]));
    return el;
  };

  elementWithChildren = (name = 'div', children = []) => appendChildren(document.createElement(name), children);

  divWithText = elementWithText.bind(document, 'div');
  divWithChildren = (children = []) => elementWithChildren('div', children);
}

export { appendChildren, elementWithText, elementWithAttrs, elementWithChildren, divWithText, divWithChildren };
