import RoxCache from './RoxCache';
import RoxBase from 'rox-base';

const OVERRIDE_CACHE_KEY = 'roxOverrideValues';

let cache = RoxCache.get(OVERRIDE_CACHE_KEY);
if (!cache) {
  cache = {};
} else {
  cache = JSON.parse(cache);
}

function writeCache(cache) {
  RoxCache.set(OVERRIDE_CACHE_KEY, JSON.stringify(cache));
}

export function hasOverride(name = null) {
  if (typeof name === 'undefined') return false;
  return typeof cache[name] !== 'undefined';
}

export function getOverride(name = null) {
  if (!name) throw new Error('Missing name');
  return cache[name];
}

export function setOverride(name, value) {
  if (!name) throw new Error('Missing name');
  cache[name] = value;
  writeCache(cache);
}

export function clearOverride(name) {
  if (!name) throw new Error('Missing name');
  cache[name] = undefined;
  delete cache[name];
  writeCache(cache);
}

export function clearAllOverrides() {
  cache = {};
  writeCache(cache);
}

export function getOriginalValue(name) {
  if (!name) throw new Error('Missing name');
  const flag = RoxBase.Repositories.Flags.flagWithName(name);
  if (!flag) return null;
  return flag._originalValue();
}
